Multiplication:
32 bit Integer :
00000000 * 12345678 -> 00000000
79642302 * 00000000 -> 00000000
79B42302 * 00900000 -> 447553B1200000
bfcabde7 * 0987b054 -> 723C8B194E61FCC
35454341 * 44569821 -> E386AC9D9B24361
43538468 * 12345696 -> 4C9A30BB68A84F0
BEEFBAAD * 12553691 -> DAC696BDC9A39FD
-00000002 * -00000002 -> 00000004
-00000002 * 00000000 -> 00000000
00000000 * -00000006 -> 00000000
-00000002 * 00000002 -> -00000004

32 bit Floating point :

0000B4CA    *  00001EB5	 underflow
0094B4CA    *  00441EB5	 underflow
029690DA    *  006D5EBD	 underflow
0EB694DA	*  176D5EBD	 underflow
2EBEF4DA	*  17EDDEBD	 07316ed3
AEBAD45A	*  576DDEBD	 c6ad9925
BEBA5442	*  5F6CDABD	 deac64e2
FFFFFFFF    *  AEFFFFFF  Result is Nan and input a is Nan
FFFFFFFF    *  FFFFFFFF  both the inputs are nan and result is also nan
00000001    *  00000002  both the inputs are denormalised and result is underflow
00000001    *  FFFFFFFF  input a is denormalised and input b is nan and result is Nan
FFFFFFFF    *  FFFFFFFF  both the inputs are Nan and result is Nan
ff800000    *  7f800000  input a is negative infinty  and input b is positive infinity
5FFFFFFF    *  6FFFFFFF  inputs are normal numbers but the result is overflow

64-bit integer:

FFFFFFFFFFFFFFFF * 1234567896352145 -> EDCBA98769CADEBB
3543135433434453 * 2533519645782301 -> FC20AEACB829D53
2325334562152389 * 4562331235632353 -> 4F383511CBB1406B
3543321354383543 * 3543544384343345 -> 2D295C67435EB40F
4566645635656463 * 3534351354348454 -> 3534351354348454
2533519645782301 * 0000000000000000 -> 0000000000000000
BEEFBEEFBEEFBEEF * FABFABFABFABFAB1 -> 2CDA837FEDD693F
ABCDABCDABCDABCD * BADBADBADBADBADB -> 2EA2CFACE04DEA5F
-0000000000000008 * 0000000000000002 -> -0000000000000016
-0000000000000008 * -0000000000000002 -> 0000000000000016
-0000000000000008 * 0000000000000000 -> 0000000000000000
0000000000000000 * -0000000000000008 -> 0000000000000000



64-bit Floating point:


00000000ff800000 * 6D878D8B9C41D60B -> 2C6781C4D6700000
CBCBCD43C8904567 * 8904563120969875 -> 14E1AB2CB22514A2
03000A000E1900BC * 709067FF06F00F09 -> 33A0724014C90777
03000A089E1900BC * 709045FF06F00F09 -> 33A050338A208D0C
46AD95108F882522 * 07F0000000000000 -> 0EAD95108F882522
4675B30F1CEAAB2C * 9FF0000000000000 -> A675B30F1CEAAB2C
0fffff000000B4CA * eeffff00ff001EB5 -> BF0FFE0106F8DB78
***Corner cases

7FFFFFFFFFFFFFFF * EE1621B1C28AC20C -> overflow in input a 
CBCBCD4788904567 * 890456312096cbac -> 7FFFFFFFFFFFFFFF // Nan
77A2AA08CE1939BC * 7FFFFFFFFFFFFFFF -> overflow should occur in input b
0000000000000002 * D764CA732617ED80 -> A is denormalised and o/p is a Nan
D764CA732617ED80 * 0000000000000033 -> 94A0800000000000    and input B is denormalised
0000000000000001 * FFFFFFFFFFFFFFFF -> input a is denormalised and overflow should occur in input b
FFFFFFFFFFFFFFFF * FFFFFFFFFFFFFFFF -> overflow should occur in both the inputs
0000000000000001 * 0000000000000002 -> 0            //          Both the inputs are denormalised 
fff0000000000000 * 7ff0000000000000 -> input a is negative  infinity and input b is positive infinity
5FFFFFFFFFFFFFFF * 6FFFFFFFFFFFFFFF -> inputs are not Nan but the result is overflow
0000000000000001 * 0000004789555689 -> both the inputs are denormalised and result is underflow

Divsion:

integer division 32-bit:

23568941 / 00000000 -> undefined
00000000 / 83544654 -> 00000000
78945620 / 14523698 -> 5
96325551 / 52148965 -> 1
78965412 / 00012345 -> 69FC
00012896 / 98635535 -> 00000000
89562233 / 96553355 -> 00000000
FEDCBA98 / 12345678 -> E
FFCFFFFD / 00001234 -> E0D9F
FFFFFFFF / 11111111 -> F
00000040 / 00000005 -> quotient : 8 , remainder : 0
00000041 / 00000005 -> quotient : 8 , remainder :1

-00000002 / -00000002 -> quotient: 00000001 , remainder :0
-00000002 / 00000000 -> undefined (or) 11111111
00000000 / -00000006 -> 00000000
-00000002 / 00000002 -> -00000001
-00000011 / -00000002 -> quotient: 00000005 , remainder :1

Floating point division 32_bit:

8178f6bf  81000000 -> 3ff8f6bf
015bd78a  00000004 -> 4adbd78a
8145f346  01400000 -> bf83f784
812C0778  01000000 -> bfac0778
811F2994  81400000 -> 3f543770 
815CBE74  81600000 -> 3f7c4760
8138E7D5  01540000 -> bf5f4840
81044BAD  017A0000 -> bf077880 
013B749C  01440000 -> 3f74d700
015548A8  012E0000 -> 3f9ce600
81790D5F  01794000 -> bf7fcc00
813632EC  01004000 -> bfb5d800
813E13CC  015B4000 -> bf5df000
0178F255  016D9400 -> 3f862000
014C6402  01162400 -> 3fae4000 
812773F0  01135000 -> bf918000
017BB2EC  812E2600 -> bfb90000 
012A9616  01413B00 -> 3f620000
010C0000  00000002 -> 4b0c0000
0108B982  813E39C0 -> bf380000
**Corner cases

FFFFFFFF 7FFFFFFF  both the inputs are Nan's and result is also Nan
FF800000 7F800000  input a is negative infinity and input b is positive negative and result is Nan
00000000 7F800000  input a is 0 and input b is positive infinity and result is 0
7F800000 00000000  input a is positive infinity and input b is zero and result is infinity
00000000 FF800000  input a is 0 and input b is negative infinity and result is 0
FF800000 00000000  input a is negative infinity and input b is zero and result is negative infinity
6FFFFFFF 00000001  input b is denormalised and overflow occurs in result
00000000 00000001  i/p b is denormalised and o/p is zero
00000002 6FFFFFFF  i/p a is denormalised and underflow occurs in result


Integer division 64 bit :


0000000000000000 / 0000000000000000 -> undefined
0000000000000000 / 1234567896352145 -> quotient : 0 ,  remainder : 0
0000000000000008 / 0000000000000002 -> quotient : 4 ,  remainder : 0
0000000000000080 / 0000000000000002 -> quotient : 40 , remainder : 0
0000000000000800 / 0000000000000002 -> quotient : 400, remainder : 0
0000000000000033 / 0000000000000002 -> quotient : 16, remainder : 1
8000000000000000 / 0000000000000002 -> quotient : 4000000000000000, remainder : 0
8000000000000011 / 0000000000000002 -> quotient : 4000000000000005 , remainder :1
4444444444444444 / 2222222222222222 -> quotient :2, remainder :0
-00000002 / -00000002 -> quotient: 00000001 , remainder :0
-00000002 / 00000000 -> undefined (or) 11111111
00000000 / -00000006 -> 00000000
-00000002 / 00000002 -> -00000001
-00000011 / -00000002 -> quotient: 00000005 , remainder :1

Floating point division 64-bit:
**Corner cases

D56400B1B67D6BD6 / 7FFFFFFFFFFFFFFF  -> Overflow should occur in B
61A2EB594FDB8E9B / 8FF8D71D360E13E2 -> overflow should occur in result
F366E3E7C6730CCF / A217C36FAE598047 -> overflow in result
7FFFFFFFFFFFFFFF / FFFFFFFFFFFFFFFF -> overflow in both a and b // Nan
6FFFFFFFFFFFFFFF / 0000000000000001 -> input b is denormalised and result is overflow
0000000000000001 / 6FFFFFFFFFFFFFFF -> input a is denormalised and result is 0 or underflow
7FF0000000000000 / FFF0000000000000 ->input a is positive infinity and input b is negative infinity
FFF0000000000000 / 7FF0000000000000 -> input a is negative infinity  and input b is positive infinity


Normal cases

D11E60C5C426E157 / BC279FE95DCEABE0 -> 54E492E2CA475BED
D18960C5C426E157 / BC279FE95DCE56E0 -> 55512FFEB30C73D3
018960C5C426E157 / 23279FE95DCE56E0 -> 1E512FFEB30C73D3
018960C06426E157 / 23279FE02DCE56E0 -> 1E513001BE4794B6
018960C56876f157 / 232409002DCE56E0 -> 1E54444BCFD6DE51
 
